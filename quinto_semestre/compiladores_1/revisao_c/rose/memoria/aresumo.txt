Memória
    Memória
        Variáveis
        Ponteiros
    Processo x Memória
-----------------------------
Memória
    conjunto de componentes eletrônicos
        computador = [sistema binário(dados) + algebra de boole(lógica)] + 
        + circuitos de comutação e conversão de dados
    Variáveis
        cada variável possui um endereço na memória
            variáveis locais são armazenadas na stack (pilha)
        obs: printf("%p", (void *) &i); // representação em hexadecimal do endereço de i
        obs: printf("%ld", (long int) &i); // representaçao em decimal do endereço de i
    Ponteiros
        variáveis capazes de armazenar e manipular endereços de memória
        sintaxe: TIPO *ponteiro;
        podem apontar para vetores
        Diferença entre vetor e &vetor
            ambos apontão para o mesmo espaço de memória e podem ser usados para armazenar Ponteiros
            sizeof(vetor) = é referente ao tamanho do vetor como um todo
            sizeof(&vetor) = é referente ao tamanho do ponteiro vetor de int
                ou seja, independente da quantidade de valores que tenham no vetor
                    o um ponteiro do vetor de int é sempre tem o mesmo tamanho
            diferença está detalhada em array_uni_aprofundado.c
Processo x Memória
    Entendendo como funciona a partição de memória (do maior para o menor)
        programa em execução: processo
            cada processo possui uma porção de memória
        Partições da memória
            stack
                variáveis locais (internas de uma função)
            heap
                blocos de memórias alocadas dinamicamente
            data
                variáveis globais (fora de funções)
                variáveis estáticas 
            text
                código que está sendo executado
    Alocação
        Estática 
            Alocação estática de memória - data
                int a; // global - data
                static int b; // estatica - data
                int main() {...}
                int soma() {
                    static int c; // local estatica - heap
                }
        Dinâmica
