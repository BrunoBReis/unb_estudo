Memória
    Memória
        Variáveis
        Ponteiros
    Processo x Memória
-----------------------------
Memória
    conjunto de componentes eletrônicos
        computador = [sistema binário(dados) + algebra de boole(lógica)] + 
        + circuitos de comutação e conversão de dados
    Variáveis
        cada variável possui um endereço na memória
            variáveis locais são armazenadas na stack (pilha)
        obs: printf("%p", (void *) &i); // representação em hexadecimal do endereço de i
        obs: printf("%ld", (long int) &i); // representaçao em decimal do endereço de i
    Ponteiros
        variáveis capazes de armazenar e manipular endereços de memória
        sintaxe: TIPO *ponteiro;
        podem apontar para vetores
        Diferença entre vetor e &vetor
            ambos apontão para o mesmo espaço de memória e podem ser usados para armazenar Ponteiros
            sizeof(vetor) = é referente ao tamanho do vetor como um todo
            sizeof(&vetor) = é referente ao tamanho do ponteiro vetor de int
                ou seja, independente da quantidade de valores que tenham no vetor
                    o um ponteiro do vetor de int é sempre tem o mesmo tamanho
            diferença está detalhada em array_uni_aprofundado.c
Processo x Memória
    Entendendo como funciona a partição de memória (do maior para o menor)
        programa em execução: processo
            cada processo possui uma porção de memória
        Partições da memória
            stack
                variáveis locais (internas de uma função)
            heap
                blocos de memórias alocadas dinamicamente
            data
                variáveis globais (fora de funções)
                variáveis estáticas 
            text
                código que está sendo executado
    Alocação
        Estática 
            Alocação estática de memória - data
                int a; // global - data
                static int b; // estatica - data
                int main() {...}
                int soma() {
                    static int c; // local estatica - heap
                }
        Dinâmica
Processo x Memória v2
    Tipos de memória
        Text
            código do programa, permanece com o mesmo tamanho
            mesmo tamanho
        Data
            memória do processo
            variáveis globais e estáticas
            mesmo tamanho
        Stack
            pilha de execução
            parâmetros, endereços de retorno e variáveis locais de funções
            pode variar
        Heap
            alocação dinâmica
            varia de tamanho
    Tipos de alocação de memória
        Alocação estática
            variáveis globais ou estáticas
            data
        Alocação automática
            variáveis locais e parâmetros de funções
                memória existe apenas na duração da função
            stack
        Alocação dinâmica
            explicita o código para armazenar dados
                controle manual ou automático
                programdor é responsável por liberar espaço de memória
            heap 